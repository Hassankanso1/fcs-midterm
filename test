#funnction 1: read data
def uploading():
    data={}
    with open ("database.txt", "r") as f:    
        for line in f: 
            [employee_id, username, timestamp, gender, salary]=line.split(', ') #https://www.freecodecamp.org/news/the-string-strip-method-in-python-explained/
            data[username]={'employee id':employee_id,
                               'timestamp':timestamp,
                               'gender':gender,
                               'salary':int(salary)}
        return data
    
#function 2 : employee Menu defined
def employee_menu(data,username):
    if data[username]["gender"]=="male":
        print("Hi Mr. " + username)
    else:
        print("Hi Ms. " + username)
    print("1. Check my salary")
    print("2. Exit")
    choose=int(input("Choose: "))
    if choose==1:
        print(data[username]["salary"])
        employee_menu(data,username)

    elif choose==2:
        menu()   


#function 3: Display statistics:
def statistics(data):
    male=0
    female=0
    
    for emp in data.values():
        if emp["gender"]=="male":
            male += 1
        if emp["gender"]=="female":
            female += 1
    total=male+female
    male_=int((male/total)*100)
    female_=int((female/total)*100)
    print("male: ", male_,"%", "female: ", female_, "%")

#function 4 to add employee

#function 5 to display all employees
def display_all(data):
     sorting_employees = sorted(data.values(), key=lambda x: x["timestamp"])    #https://stackoverflow.com/questions/62810058/python-is-there-a-way-to-sort-a-list-of-strings-which-contain-a-date-and-time-w
     for i in sorting_employees:
        print("employee id:", i['employee id'])
        print("timestamp:", i['timestamp'])
        print("gender:", i['gender'])
        print("salary:", i['salary'])
    


#function 6 to change employee's salary

#function 7 to remove employee

#function 8 to increase salary





#function 10: admin menu defined
def admin_menu():
    data=uploading()
    print("1. Dispaly Statistics")
    print("2. Add an Employee")
    print("3. Display all employees")
    print("4. Change employee's salary")
    print("5. Remove employee")
    print("6. Raise employee's salary")
    print("7. Exit")

    choose=int(input("Choose: "))
    
    if choose==1:
        statistics(data)
        admin_menu()
    elif choose==2:
        add_employee()
        admin_menu()
    elif choose==3:
        display_all(data)
        admin_menu()
    elif choose==4:
        change_salary()
        admin_menu()
    elif choose==5:
        remove_employee()
        admin_menu()
    elif choose==6:
        increase_salary()
        admin_menu()
    elif choose==7:
        menu()
    elif choose<1 or choose >7:
        print("Choose again")
        admin_menu()
    
        
    

#function 11: menu display
def menu():
    verification=False
    iterator=1
    data=uploading()
    #print("cdaoud" in data.values())


    while iterator<=5 and verification == False:

        print("Welcome User")
        user=input("enter username: ")
        password=input("enter password: ")

        if user=="admin" and password=="admin123123" :
            admin_menu()
            verification=True

        elif user in data.keys():
            employee_menu(data,user)
            verification=True

        else:
            print("Try again")
            iterator+=1

    if iterator==5:
        print('5 Trials')
        return


menu()

#############333

class creating_stack_queue:

    def __init__(self):
        self.stack = []  # A stack to store numbers from the input
        self.queue = []  # A queue to store numbers from the input

    def palindrome(self, info):
       # input_str = ''.join(filter(str.isdigit, input_str))  # Filter out non-digit characters
        for i in info:
            self.stack.append(i)  # Add the digit to the stack
            self.queue.insert(0, i)  # Add the digit to the front of the queue
        while self.stack and self.queue:
            if self.stack.pop() != self.queue.pop(0):
                return False  # If digits from the stack and queue don't match, it's not a palindrome
        return True  # If all digits match, it's a palindrome
    
def balance(data):
    stack = []  # A stack to store opening brackets
    start = "([{"
    end = ")]}"
    for i in data:
        if i in start:
            stack.append(i)  # If an opening bracket is encountered, push it onto the stack
        elif i in end:
            if not stack:
                return False  # If a closing bracket is encountered with no matching opening bracket, it's not balanced
            top = stack.pop()  # Pop the top of the stack
            if start.index(top) != end.index(i):
                return False  # If the brackets don't match, it's not balanced
    return not stack  # If the stack is empty at the end, all brackets are matched and balanced


input1 = "(1+2)-3*[41+6]"
input2 = "(1+2)-3*[41+6}"
input3 = "(1+2)-3*[41+6"
input4 = "(1+2)-3*]41+6["
input5 = "(1+[2-3]*4{41+6})"
print(balance(input1))  
print(balance(input2)) 
print(balance(input3)) 
print(balance(input4))
print(balance(input5))

#car wash exrecise 
class Car:
    def __init__(self, make, color, plate_number):
        self.make = make
        self.color = color
        self.plate_number = plate_number

class queue:
    def __init__(self):
        self.queue = []
    def enqueue(self, car):
        self.queue.append(car)
    def dequeue(self):
        if not self.isEmpty():
            return self.queue.pop(0)
        else:
            return None
    def size(self):
        return len(self.queue)
    def isEmpty(self):
        return len(self.queue) == 0
    def front(self):
        if not self.isEmpty():
            return self.queue[0]
        else:
            return None
car_wash_queue = queue()
while True:
    print("Car Wash Queue Program")
    print("1. Insert a car to the queue")
    print("2. Remove the car from the queue")
    print("3. Quit")

    choice = input("Enter your choice: ")

    if choice == "1":
        make = input("Enter car make: ")
        color = input("Enter car color: ")
        plate_number = int(input("Enter car plate number: "))
        car = Car(make, color, plate_number)
        car_wash_queue.enqueue(car)
        print(f"{make} {color} (Plate: {plate_number}) added to the queue.")

    elif choice == "2":
        if not car_wash_queue.isEmpty():
            removed_car = car_wash_queue.dequeue()
            print(f"Car removed from the queue:")
            print(f"Make: {removed_car.make}")
            print(f"Color: {removed_car.color}")
            print(f"Plate Number: {removed_car.plate_number}")
        else:
            print("No cars in the queue.")

    elif choice == "3":
        print("Exiting the program.")
        break

    else:
        print("Invalid choice. Please select 1, 2, or 3.")
